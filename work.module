<?php

/**
 * Implements hook_entity_info().
 */
function work_entity_info() {
  $return['work'] = array(
    'label' => t('Work entity'),
    'controller class' => 'workController',
    'base table' => 'work',
    'revision table' => 'work_revision',
    'uri callback' => 'work_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (work_types() as $type => $info) {
    $return['work']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/dbo/works/manage/%work_type',
        'real path' => 'admin/dbo/works/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer works'),
      ),
    );
  }

  return $return;
}

/**
 * Implements hook_block_info().
 */
function work_block_info() {
  // subjects for the current work
  $blocks['work_subjects'] = array(
    'info' => t('Work subjects'),
  );
  $blocks['work_external_links'] = array(
    'info' => t('Work external links'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function work_block_view($delta = '') {
  // create the blocks
  $blocks = array();

  switch ($delta) {
    // The subject terms that this work is tagged with
    case 'work_subjects':
      // retrieve the work entity from the menu item
      $work_entity = menu_get_object('work');

      if (isset($work_entity->taxonomy_terms['subject'])) {
        $subjects = array();
        foreach ($work_entity->taxonomy_terms['subject'] as $term) {
          $subjects[] = l($term->name, 'taxonomy/term/' . $term->tid);
        }
        $blocks['subject'] = t('Subjects');
        $blocks['content'] = theme('work_subjects', array('subjects' => $subjects));
      }
      break;
    // The external links for the current work or agent (This block is shared
    // by the agent module.)
    case 'work_external_links':

      // retrieve the current entity from the menu item
      $entity = menu_get_object('work');
      if (!$entity) {
        $entity = menu_get_object('agent');
      }

      $links = array();
      // IMDB and Wikipedia links
      if (isset($entity->idents)) {
        if (! empty($entity->idents->imdb)) {
          if ($entity->idents->module == 'work') {
            $links[] = l('The Internet Movie Database (IMDb)', 'http://www.imdb.com/title/' . $entity->idents->imdb);
          }
          elseif ($entity->idents->module == 'agent') {
            $links[] = l('The Internet Movie Database (IMDb)', 'http://www.imdb.com/name/' . $entity->idents->imdb);
          }

        }
        if (! empty($entity->idents->wikipedia)) {
          $links[] = l('Wikipedia', 'http://en.wikipedia.org/wiki/' . $entity->idents->wikipedia);
        }
      }
      // Other external links
      if (!empty($entity->external_link)) {
        foreach ($entity->external_link['und'] as $link) {
          $links[] = l($link['title'], $link['url']);
        }
      }
      if (! empty($links)) {
        $blocks['subject'] = t('External links');
        $blocks['content'] = theme('work_external_links', array('links' => $links));
      }
      break;
  }
  return $blocks;
}

/**
 * Implementation of hook_entity_view().
 */
function work_entity_view($entity, $type, $view_mode = 'full', $langcode = NULL) {

  if ($type != 'work') {
    return $entity;
  }

  if ($view_mode == 'teaser') {
    // title
    $entity->content['title'] = array(
      '#markup' => l(filter_xss($entity->title), 'work/' . $entity->id, array('html' => TRUE)) . '<br />',
      '#weight' => -5,
    );
    // genres
    if (isset($entity->taxonomy_terms['cid_genre'])) {
      $genres = array();
      foreach ($entity->taxonomy_terms['cid_genre'] as $term) {
        $genres[] = l($term->name, 'taxonomy/term/' . $term->tid);
      }
      $entity->content['genre'] = array(
        '#markup' => join(' / ', $genres),
      );
    }
    // primary_image
    if (isset($entity->primary_image[LANGUAGE_NONE][0]['uri'])) {
      $entity->content['primary_image'] = array(
        '#markup' => theme('image_style', array('style_name' => 'dbo_common_gallery_image', 'path' => render($entity->primary_image[LANGUAGE_NONE][0]['uri']))),
      );
    }

    /**
     * Summary - use the following fields in this order:
     *  one-liner, introduction summary, first 255 characters of the
     *  introduction body or first 255 chars of CID descriptions (Synopsis,
     *  library synopsis or NFA catalogue).
     */
    $summary_str = NULL;
    if (isset($entity->one_liner[LANGUAGE_NONE][0]['value'])) {
      $summary_str = $entity->one_liner[LANGUAGE_NONE][0]['value'];
    }
    elseif(isset($entity->introduction[LANGUAGE_NONE][0]['summary'])) {
      $summary_str = $entity->introduction[LANGUAGE_NONE][0]['summary'];
    }
    elseif(isset($entity->introduction[LANGUAGE_NONE][0]['value'])) {
      $summary_str = $entity->introduction[LANGUAGE_NONE][0]['value'];
    }
    elseif(isset($entity->descriptions) && !empty($entity->descriptions)) {
      $description_types = array('synopsis', 'library synopsis', 'nfa catalogue');
      foreach ($description_types as $description_type) {
        foreach ($entity->descriptions as $description) {
          if (strtolower($description->type) == $description_type) {
            $summary_str = $description->body;
            break 2;
          }
        }
      }
    }
    $summary_str_no_tags = strip_tags($summary_str);
    if (strlen($summary_str_no_tags) > 255) {
      $summary_str = substr($summary_str_no_tags, 0, 255) . '...';
    }
    $entity->content['summary'] = array(
      '#markup' => $summary_str,
    );
  }

  elseif ($view_mode == 'full') {
    $entity->content['title']['#markup'] = $entity->title;

    // Alternative titles
    if (isset($entity->alternative_titles) && !empty($entity->alternative_titles)) {
      $alt_t = array();
      foreach ($entity->alternative_titles as $alternative_title) {
        $alt_title_str = '<span class="type">' . $alternative_title->type . "</span>";
        $alt_title_str .= '<span class="title">' . $alternative_title->title . "</span>";
        $alt_t[] = $alt_title_str;
      }
      $alt_titles = '<ul class="alt-titles">' . PHP_EOL . '<li>' . implode($alt_t, '</li>' . PHP_EOL . '<li>') . '</li>' . PHP_EOL . '</ul>';
      $entity->content['alternative_titles']['#markup'] = $alt_titles;
    }

    // Production date
    if (isset($entity->production_date) && !empty($entity->production_date)) {
      if (preg_match('/^(\d{4})\-(\d{2})\-(\d{2})$/', $entity->production_date, $matches)) {
        $prod_date = date('j F Y', mktime(0, 0, 0, $matches[2], $matches[3], $matches[1]));
      }
      elseif (preg_match('/^(\d{4})$/', $entity->production_date, $matches)) {
        $prod_date = $matches[1];
      }
      $entity->content['production_date']['#markup'] = $prod_date;
    }

    // Top-billed cast and credits
    if (isset($entity->top_credits)) {
      $top_credits = array();
      if (! empty($entity->top_credits['direction'])) {
        $top_credits[] = "Directed by " . implode(' / ', $entity->top_credits['direction']);
      }
      if (! empty($entity->top_credits['cast'])) {
        $top_credits[] = "Featuring " . implode(' / ', $entity->top_credits['cast']);
      }
      $entity->content['top_cast'] = implode($top_credits, '<br />');
    }

    // Cast and credits
    if (isset($entity->credits) && ! empty($entity->credits)) {
      if (isset($entity->credits['credits'])) {
        $credit_contents = array();
        foreach ($entity->credits['credits'] as $credit_group => $credits) {
          $credit_group_contents = array();
          $credit_group_contents[] = '<h5>' . $credit_group . '</h5>';
          $credit_group_contents[] = '<ul>';
          foreach ($credits as $credit) {
            if (!empty($credit->on_screen)) {
              $role = $credit->on_screen;
            }
            else {
              $role = $credit->role;
            }
            $credit_group_contents[] = '<li>';
            $credit_group_contents[] = '<span class="credit-role">' . $role . '</span>';
            $credit_string = l(t($credit->agent_name), 'agent/' . $credit->agent_id);
            $credit_group_contents[] = '<span class="credit-agent">' . $credit_string . '</span>';
            $credit_group_contents[] = '</li>';
          }
          $credit_group_contents[] = '</ul>';
          $credit_contents[] = implode($credit_group_contents, PHP_EOL);
        }
        $entity->content['credits'] = implode($credit_contents, PHP_EOL);
      }
      if (isset($entity->credits['cast'])) {
        $credit_contents = array();
        foreach ($entity->credits['cast'] as $cast_group => $casts) {
          $credit_group_contents = array();
          $credit_group_contents[] = '<ul>';
          foreach ($casts as $cast) {
            if (!empty($cast->on_screen)) {
              $role = $cast->on_screen;
            }
            else {
              $role = $cast->role;
            }
            $credit_group_contents[] = '<li>';
            $credit_group_contents[] = '<span class="credit-role">' . $role . '</span>';
            $cast_string = l($cast->agent_name, 'agent/' . $cast->agent_id);
            $credit_group_contents[] = '<span class="credit-agent">' . $cast_string . '</span>';
            $credit_group_contents[] = '</li>';
          }
          $credit_group_contents[] = '</ul>';
          $credit_contents[] = implode($credit_group_contents, PHP_EOL);
        }
        $entity->content['cast'] = implode($credit_contents, PHP_EOL);
      }
    }

    /**
     * Introduction / CID Descriptions.
     * If an introduction has been created in drupal this should be used for
     * introduction on the work page.  Failing an introduction, fallback to a
     * CID description. Only one of the 'Synopsis', 'Library Synopsis' or 'NFA
     * Catalogue' description types should be used in that order of preference.
     */
    if (isset($entity->introduction[LANGUAGE_NONE][0]['summary']) ||
        isset($entity->introduction[LANGUAGE_NONE][0]['value'])
       ) {
      $entity->content['description']['#markup'] = "";
      if (isset($entity->introduction[LANGUAGE_NONE][0]['summary'])) {
        $entity->content['description']['#markup'] = $entity->introduction[LANGUAGE_NONE][0]['summary'];
      }
      if (isset($entity->introduction[LANGUAGE_NONE][0]['value'])) {
        $entity->content['description']['#markup'] .= $entity->introduction[LANGUAGE_NONE][0]['value'];
      }
    }
    elseif (isset($entity->descriptions) && !empty($entity->descriptions)) {
      $description_types = array('synopsis', 'library synopsis', 'nfa catalogue');
      foreach ($description_types as $description_type) {
        foreach ($entity->descriptions as $description) {
          if (strtolower($description->type) == $description_type) {
            $entity->content['description']['#markup'] = $description->body;
            break 2;
          }
        }
      }
    }
    $entity->content['description']['#label_display'] = 'hidden';

    // Additional field api fields
    if (!empty($entity->synopsis)) {
      $entity->content['synopsis']['#markup'] = $entity->synopsis[LANGUAGE_NONE][0]['value'];
      $entity->content['synopsis']['#label_display'] = 'hidden';
    }

    /**
     * If the work has been tagged with taxonomy terms, the terms will be in
     * a taxonomy_terms property on the work object grouped by vocabulary and
     * including any parent terms.
     * These should be converted to markup ready to be dropped in a <ul> on the
     * template.  Any child terms will be nested in <ul>s.
     */
    if (isset($entity->taxonomy_terms) && !empty($entity->taxonomy_terms)) {
      $term_markup = array();
      foreach ($entity->taxonomy_terms as $vocab => $terms) {
        // get all parents for the current term and order from top parent down
        foreach ($terms as $term) {
          $term_markup[$vocab][] = l($term->name, 'taxonomy/term/' . $term->tid);
        }
      }
      $entity->content['terms'] = $term_markup;
    }

    // record completeness
    $scale = 590;
    //print_r($entity); exit;
    $record_completeness_value = $entity->record_completeness * 10;
    if ($record_completeness_value > $scale) {
      $record_completeness_value = $scale;
    }
    $remainder = round($scale - $record_completeness_value);
    $entity->content['record_completness'] = $record_completeness_value;
    $entity->content['record_completness_remainder'] = $remainder;

  }
  return $entity;
}

/**
 * Entity uri callback.
 */
function work_uri($work) {
  return array(
    'path' => 'work/' . $work->id,
  );
}

/**
 * Implement idents_path_info hook.
 *
 * Register the work module with the idents module.
 */
function work_idents_path_info() {
  $paths = array(
    'work/' => array(
      'description' => 'Work Path'
    ),
  );
  return $paths;
}

/**
 * Implements hook_field_extra_fields().
 */
function work_field_extra_fields() {
  $extra = array();

  foreach (work_types() as $type) {
    $extra['work'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the work'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The name of the work'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_permission().
 */
function work_permission() {
  return array(
    'administer works' =>  array(
      'title' => t('Administer work entities'),
    ),
    'create works' =>  array(
      'title' => t('Create work entities'),
    ),
    'update works' =>  array(
      'title' => t('Update work entities'),
    ),
    'view works' =>  array(
      'title' => t('View work entities'),
    ),
    'delete works' =>  array(
      'title' => t('Delete work entities'),
    ),
    'view api works' =>  array(
      'title' => t('View a work via the api'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function work_menu() {
  // individual entity paths (view, edit, delete)
  $items['work/%work'] = array(
    'title callback' => 'work_page_title',
    'title arguments' => array(1),
    'page callback' => 'work_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view works'),
    'type' => MENU_CALLBACK,
    'file' => 'work.pages.inc',
  );
  $items['work/%work/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['work/%work/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'work_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('update works'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'work.pages.inc',
  );
  $items['work/%work/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('work_delete_confirm', 1),
    'access arguments' => array('delete works'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'work.pages.inc',
  );
  // Admin pages
  $items['admin/dbo/works'] = array(
    'title' => 'Works',
    'description' => 'Work entities',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  $items['admin/dbo/works/manage'] = array(
    'title' => 'Manage works',
    'page callback' => 'work_overview_types',
    'access arguments' => array('administer works'),
    'file' => 'work.admin.inc',
  );
  $items['admin/dbo/works/manage/%work_type'] = array(
    'title' => 'View work type',
    'title callback' => 'work_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'work_information',
    'page arguments' => array(4),
    'access arguments' => array('administer works'),
    'file' => 'work.admin.inc',
  );
  $items['admin/dbo/works/manage/%work_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Work entity listings
  $items['admin/dbo/works/recent'] = array(
    'title' => 'Recent works',
    'description' => 'View a list of recently imported works.',
    'page callback' => 'work_page_list_recent',
    'access arguments' => array('view works'),
    'file' => 'work.pages.inc',
  );
  $items['admin/dbo/works/list'] = array(
    'title' => 'Enhanced works',
    'description' => 'View a list of all enhanced works.',
    'page callback' => 'work_page_list',
    'access arguments' => array('view works'),
    'file' => 'work.pages.inc',
  );
  return $items;
}

/**
* Implements hook_admin_paths().
*/
function work_admin_paths() {
  $paths = array(
    'work/*/edit' => TRUE,
    'work/*/delete' => TRUE,
  );
  return $paths;
}

/**
 * Sets the page title based on the specified work.
 *
 * @param $work
 *   The work object.
 */
function work_page_title($work) {
  return $work->title;
}

/**
 * Implements hook_forms().
 *
 * All work forms share the same form handler.
 */
function work_forms() {
  $forms = array();
  $types = work_types();
  if ($types) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_work_form']['callback'] = 'work_form';
    }
  }
  return $forms;
}

/**
 * Get a list of all work types available.
 *
 * Usually this would be more full-featured.
 *
 * @return array
 *   An array of work type objects. Note that the "type" key matches what
 *   was defined as the main key in hook_entity_info().
 */
function work_types() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['tv'] = (object) array(
      'type' => 'tv',
      'name' => t('TV'),
      'description' => t('Television.')
    );
    $types['film'] = (object) array(
      'type' => 'film',
      'name' => t('Film'),
      'description' => t('Film.')
    );
  }
  return $types;
}

/**
 * Menu title callback.
 *
 * @param $type
 *   The work type.
 * @return string
 *   The human-friendly name of the work type.
 */
function work_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}

/**
 * Get an individual work type definition object.
 *
 * @param $type
 *   The key of the work type we want.
 * @return object
 *   The specified work type.
 */
function work_type_load($type) {
  $types = work_types();
  $type = str_replace('-', '_', $type);
  return isset($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Load work entities from the database.
 *
 * This function should be used whenever you need to load more than one work
 * from the database. works are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of work IDs.
 * @param $conditions
 *   An array of conditions on the {work} table in the form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of node objects indexed by nid.
 */
function work_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('work', $ids, $conditions, $reset);
}

/**
 * Load an work object from the database.
 *
 * @param $id
 *   The work ID.
 * @param $vid
 *   The revision ID.
 * @param $reset
 *   Whether to reset the work_load_multiple cache.
 *
 * @return
 *   A fully-populated node object.
 */
function work_load($id = NULL, $vid = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $work = work_load_multiple($ids, $conditions, $reset);
  return $work ? reset($work) : FALSE;
}

/**
 * Save an work.
 *
 * @param $work
 *   The work to be saved.
 * @return
 *   The saved work, now with an aid if necessary.
 */
function work_save($work) {
  return entity_get_controller('work')->save($work);
}

/**
 * Returns an initialized work object.
 *
 * @param $type
 *   The machine-readable type of the work.
 *
 * @return
 *   An work object with all default fields initialized.
 */
function work_new($type = '') {
  return entity_get_controller('work')->create($type);
}

/**
 * Deletes an work by ID.
 *
 * @param $id
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function work_delete($id) {
  return work_delete_multiple(array($id));
}

/**
 * Deletes multiple works by ID.
 *
 * @param $ids
 *   An array of work IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function work_delete_multiple($ids) {
  return entity_get_controller('work')->delete($ids);
}

/**
 * Implements hook_theme().
 */
function work_theme($existing, $type, $theme, $path) {
  return array(
    'work' => array(
      'variables' => array('element' => NULL),
      'template' => 'work'
    ),
    'work_subjects' => array(
      'arguments' => array(
        'subjects' => NULL,
      ),
      'template' => 'work_subjects',
    ),
    'work_external_links' => array(
      'arguments' => array(
        'links' => NULL,
      ),
      'template' => 'work_external_links',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Disable the administration term listing pages for the 'cid_genre'
 * [admin/structure/taxonomy/cid_genre] and 'subject'
 * [admin/structure/taxonomy/subject] vocabularies.
 */
function work_menu_alter(&$items) {
  $items['admin/structure/taxonomy/cid_genre']['access callback'] = FALSE;
  $items['admin/structure/taxonomy/subject']['access callback'] = FALSE;
}

/**
 * Implements hook_services_resources().
 */
function work_services_resources() {
  return array(
    'work' => array(
      'retrieve' => array(
        'help' => 'Retrieves a work',
        'file' => array('file' => 'services.inc', 'module' => 'work'),
        'callback' => '_work_retrieve',
        'access callback' => '_work_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'int',
            'description' => 'The web_id of the work to get',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
    ),
  );
}


############ temporary code for removing lorem ipsum text from work introductions
// run as:
// drush eval "remove_lorem_from_works()"
//
function remove_lorem_from_works() {
  // find all fds_work nodes that are not published, and get the matching work entity_id from the idents table,
  // load the entities, remove biography and introduction, and re-save.
  $entities = db_query("
    SELECT n.nid, i.entity_id, i.module FROM {idents} i
    INNER JOIN {node} n ON n.nid = i.nid
    WHERE n.status = 0
    AND i.entity_id <> ''
    AND (i.module = 'work' OR i.module = 'agent')
  ")->fetchAll();
  if (count($entities)) {
    foreach ($entities as $entity) {
      $entity_load = entity_load($entity->module, array($entity->entity_id));
      if (isset($entity_load[$entity->entity_id]->introduction)) {
        $entity_load[$entity->entity_id]->introduction = array();
      }
      if (isset($entity_load[$entity->entity_id]->biography)) {
        $entity_load[$entity->entity_id]->biography = array();
      }
      entity_save($entity->module, $entity_load[$entity->entity_id]);
      $entity_load = entity_load($entity->module, array($entity->entity_id));

      echo $entity->module . ': ' . $entity->entity_id . ' DONE' . PHP_EOL;
    }
  }
}
#################################################################################
